[{"C:\\cat-forum\\frontend\\src\\index.js":"1","C:\\cat-forum\\frontend\\src\\App.js":"2","C:\\cat-forum\\frontend\\src\\contexts\\SubjectContextProvider.js":"3","C:\\cat-forum\\frontend\\src\\components\\ReplyList.js":"4","C:\\cat-forum\\frontend\\src\\pages\\Home.js":"5","C:\\cat-forum\\frontend\\src\\components\\Header.js":"6","C:\\cat-forum\\frontend\\src\\components\\ThreadList.js":"7","C:\\cat-forum\\frontend\\src\\contexts\\UserContextProvider.js":"8","C:\\cat-forum\\frontend\\src\\components\\ReplyItem.js":"9","C:\\cat-forum\\frontend\\src\\components\\SubjectList.js":"10","C:\\cat-forum\\frontend\\src\\components\\ThreadItem.js":"11","C:\\cat-forum\\frontend\\src\\components\\CreateNewThreadModal.js":"12","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\AuthenticationModal.js":"13","C:\\cat-forum\\frontend\\src\\components\\SubjectItem.js":"14","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\LoginModal.js":"15","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\RegisterModal.js":"16","C:\\cat-forum\\frontend\\src\\components\\UserInformationModal.js":"17","C:\\cat-forum\\frontend\\src\\components\\ModeratorButtonStyle.js":"18"},{"size":209,"mtime":1608300270953,"results":"19","hashOfConfig":"20"},{"size":1015,"mtime":1609353527385,"results":"21","hashOfConfig":"20"},{"size":779,"mtime":1608316020731,"results":"22","hashOfConfig":"20"},{"size":3876,"mtime":1609853541914,"results":"23","hashOfConfig":"20"},{"size":195,"mtime":1608300270954,"results":"24","hashOfConfig":"20"},{"size":2832,"mtime":1609765299813,"results":"25","hashOfConfig":"20"},{"size":1372,"mtime":1609146530539,"results":"26","hashOfConfig":"20"},{"size":813,"mtime":1609142784165,"results":"27","hashOfConfig":"20"},{"size":3083,"mtime":1609854032239,"results":"28","hashOfConfig":"20"},{"size":516,"mtime":1608304650881,"results":"29","hashOfConfig":"20"},{"size":843,"mtime":1609761436764,"results":"30","hashOfConfig":"20"},{"size":2667,"mtime":1609146542544,"results":"31","hashOfConfig":"20"},{"size":1028,"mtime":1609142784159,"results":"32","hashOfConfig":"20"},{"size":832,"mtime":1609711127786,"results":"33","hashOfConfig":"20"},{"size":3255,"mtime":1609766374740,"results":"34","hashOfConfig":"20"},{"size":3963,"mtime":1609850923759,"results":"35","hashOfConfig":"20"},{"size":5623,"mtime":1609850403919,"results":"36","hashOfConfig":"20"},{"size":714,"mtime":1609710821620,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"w4ozw0",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\cat-forum\\frontend\\src\\index.js",[],["81","82"],"C:\\cat-forum\\frontend\\src\\App.js",[],"C:\\cat-forum\\frontend\\src\\contexts\\SubjectContextProvider.js",["83","84"],"import React, { createContext, useContext, useEffect, useState } from \"react\";\r\n\r\nexport const SubjectContext = createContext();\r\n\r\nconst SubjectContextProvider = (props) => {\r\nconst [chosenSubject, setChosenSubject] = useState('')\r\nconst [chosenThread, setChosenThread] = useState('');\r\nconst [subjects, setSubjects] = useState('')\r\n\r\nconst fetchSubjects = async () => {\r\n  let result = await fetch(\"/rest/subjects\");\r\n  result = await result.json();\r\n  setSubjects(result);\r\n};\r\n\r\n  const values = {\r\n    subjects,\r\n    chosenSubject,\r\n    setChosenSubject,\r\n    fetchSubjects,\r\n    chosenThread,\r\n    setChosenThread\r\n  };\r\n\r\n  return (\r\n    <SubjectContext.Provider value={values}>{props.children}</SubjectContext.Provider>\r\n  );\r\n};\r\nexport default SubjectContextProvider;\r\n","C:\\cat-forum\\frontend\\src\\components\\ReplyList.js",["85","86","87","88","89"],"C:\\cat-forum\\frontend\\src\\pages\\Home.js",[],"C:\\cat-forum\\frontend\\src\\components\\Header.js",["90","91","92"],"import React, {useState, useContext} from 'react'\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from 'reactstrap';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nimport AuthenticationModal from './AuthenticationModals/AuthenticationModal'\r\nimport UserInformationModal from './UserInformationModal'\r\nconst catLogo = require('../images/catforum.png')\r\n\r\nconst Header = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n     const { user, setUser } = useContext(UserContext);\r\n     const [userModal, setUserModal] = useState(false);\r\n     const Usertoggle = () => setUserModal(!userModal);\r\n\r\n  let history = useHistory();\r\n  const toggle = () => setIsOpen(!isOpen);\r\n   const toggleModal = () => {\r\n     setModalIsOpen(!modalIsOpen);\r\n   };\r\n\r\n    const goToHomePage = () => {\r\n      history.push(\"/\");\r\n    };\r\n     const goToMyPage = () => {\r\n      // history.push(\"/mypage\");\r\n      console.log('Add mypage here');\r\n     };\r\n\r\n     const logout = async () => {\r\n       let res = await fetch(\"/auth/logout\");\r\n       setUser(null);\r\n       history.push(\"/\");\r\n     };\r\n    \r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand onClick={goToHomePage} className=\"pointer\">\r\n          Catforum\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            {user === null ? (\r\n              <>\r\n                <NavItem>\r\n                  <NavLink className=\"pointer\" onClick={toggleModal}>\r\n                    Logga in\r\n                  </NavLink>\r\n                  <AuthenticationModal\r\n                    modalIsOpen={modalIsOpen}\r\n                    toggleModal={toggle}\r\n                    setModalIsOpen={setModalIsOpen}\r\n                  />\r\n                </NavItem>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <NavItem className=\"\">\r\n                  <NavLink className=\"pointer\" onClick={Usertoggle}>\r\n                    Min sida\r\n                  </NavLink>\r\n                  <UserInformationModal\r\n                    toggle={Usertoggle}\r\n                    modal={userModal}\r\n                    setModal={setUserModal}\r\n                    username={user.username}\r\n                  />\r\n                </NavItem>\r\n                <NavItem className=\"\">\r\n                  <NavLink className=\"pointer\" onClick={logout}>\r\n                    Logga ut\r\n                  </NavLink>\r\n                </NavItem>\r\n              </>\r\n            )}\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\nexport default Header;","C:\\cat-forum\\frontend\\src\\components\\ThreadList.js",["93"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport {\r\n Button\r\n} from 'reactstrap';\r\nimport { SubjectContext } from '../contexts/SubjectContextProvider'\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nimport ThreadItem from './ThreadItem'\r\nimport CreateNewThreadModal from './CreateNewThreadModal'\r\n\r\nconst ThreadList = () =>{\r\n  const { chosenSubject } = useContext(SubjectContext);\r\n  const {user} = useContext(UserContext)\r\n  const [threads, setThreads] = useState(null);\r\n\r\n  const [modal, setModal] = useState(false);\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const fetchThreads = async () =>{\r\n    let result = await fetch('/rest/threads/' + chosenSubject.id)\r\n    result = await result.json();\r\n    console.log(result);\r\n    setThreads(result);\r\n  }\r\n\r\n  useEffect(() => {\r\n   fetchThreads()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {user ? (\r\n        <div>\r\n          <Button onClick={toggle}>Create new thread</Button>\r\n          <CreateNewThreadModal\r\n            toggle={toggle}\r\n            modal={modal}\r\n            setModal={setModal}\r\n            fetchThreads={fetchThreads}\r\n          />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {threads &&\r\n        threads.map((thread, i) => {\r\n          return <ThreadItem thread={thread} key={i} />;\r\n        })}\r\n    </div>\r\n  );\r\n}\r\nexport default ThreadList;","C:\\cat-forum\\frontend\\src\\contexts\\UserContextProvider.js",[],"C:\\cat-forum\\frontend\\src\\components\\ReplyItem.js",[],"C:\\cat-forum\\frontend\\src\\components\\SubjectList.js",["94","95"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport SubjectItem from './SubjectItem'\r\nimport { SubjectContext} from '../contexts/SubjectContextProvider'\r\n\r\nconst SubjectList = () => {\r\n  const { fetchSubjects, subjects } = useContext(SubjectContext)\r\n\r\n  useEffect(() => {\r\n    fetchSubjects();\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {subjects && subjects.map((subject, i) => {\r\n       return <SubjectItem subject={subject} key={i}/> \r\n      })}\r\n    </div>\r\n  )\r\n}\r\nexport default SubjectList;","C:\\cat-forum\\frontend\\src\\components\\ThreadItem.js",[],"C:\\cat-forum\\frontend\\src\\components\\CreateNewThreadModal.js",["96","97"],"import React, { useState, useContext } from \"react\";\r\nimport { Button, Modal, ModalBody, Form, FormGroup, Label, Input } from \"reactstrap\";\r\nimport {SubjectContext} from '../contexts/SubjectContextProvider'\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nconst CreateNewThreadModal = (props) => {\r\n  const [threadTitle, setThreadTitle] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const { chosenSubject, chosenThread } = useContext(SubjectContext)\r\n  const { user } = useContext(UserContext)\r\n\r\n  const createThread = async (e) => {\r\n    e.preventDefault()\r\n\r\n    let threadInformation = {\r\n      title: threadTitle,\r\n      creator: user.username\r\n    }\r\n\r\n   let replyInformation = {\r\n      message: message,\r\n      sender: user.username\r\n    }\r\n\r\n   let thread = await fetch(\"/rest/threads/\" + chosenSubject.id, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(threadInformation),\r\n   });\r\n    \r\n    thread = await thread.json();\r\n\r\n    console.log(thread);\r\n    console.log(thread.lastInsertRowid);\r\n\r\n     let reply = await fetch(\"/rest/replies/\" + thread.lastInsertRowid, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(replyInformation),\r\n   });\r\n   props.toggle()\r\n   props.fetchThreads()\r\n }\r\n  return (\r\n    <div className=\"row mx-auto\">\r\n      <Modal isOpen={props.modal} toggle={props.toggle} >\r\n      <h2 className=\"text-center mt-4 tradeHub-orange font-weight-bold col-12\">\r\n        Create new thread\r\n      </h2>\r\n      <ModalBody className=\"\">\r\n        <Form onSubmit={createThread}>\r\n          <FormGroup>\r\n            <Label\r\n              for=\"threadTitle\"\r\n            >\r\n              Title\r\n            </Label>\r\n            <Input\r\n              required\r\n              type=\"text\"\r\n              placeholder=\"Title\"\r\n              value={threadTitle}\r\n              onChange={(e) => setThreadTitle(e.target.value)}\r\n            />\r\n            </FormGroup>\r\n             <FormGroup>\r\n            <Label\r\n              for=\"threadTitle\"\r\n            >\r\n              Message\r\n            </Label>\r\n            <Input\r\n              required\r\n              type=\"textarea\"\r\n              placeholder=\"Message\"\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n            />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Button>\r\n                Create thread\r\n              </Button>\r\n            </FormGroup>\r\n        </Form>\r\n      </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateNewThreadModal;\r\n","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\AuthenticationModal.js",[],"C:\\cat-forum\\frontend\\src\\components\\SubjectItem.js",[],"C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\LoginModal.js",["98"],"import React, { useState, useContext } from \"react\";\r\nimport { UserContext } from \"../../contexts/UserContextProvider\";\r\nimport { Button, ModalBody, Form, FormGroup, Label, Input } from \"reactstrap\";\r\n\r\nconst LoginModal = (props) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessageShown, setErrorMessageShown] = useState(false);\r\n  const { setUser, fetchUser } = useContext(UserContext);\r\n\r\n  const performLogin = async (e) => {\r\n    console.log('In login method in frontend');\r\n    e.preventDefault();\r\n\r\n    const credentials =\r\n     {email: email,\r\n      password: password\r\n    }\r\n    console.log(credentials);\r\n\r\n    await fetch(\"/auth/login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n      fetchUser();\r\n      setErrorMessageShown(false);\r\n      props.setModalIsOpen(!props.modalIsOpen);\r\n    \r\n  };\r\n  return (\r\n    <div className=\"row mx-auto authentication-modals\">\r\n      <h2 className=\"text-center mt-4 tradeHub-orange font-weight-bold col-12\">\r\n        Logga in\r\n      </h2>\r\n      <ModalBody className=\"\">\r\n        <Form onSubmit={performLogin}>\r\n          <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 m-0\">\r\n            <Label\r\n              for=\"emailAddress\"\r\n              className=\"tradeHub-dark-grey font-weight-bold\"\r\n            >\r\n              Email\r\n            </Label>\r\n            <Input\r\n              required\r\n              className=\"light-grey-background tradeHub-input\"\r\n              type=\"email\"\r\n              placeholder=\"Email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n            <Label for=\"password\">Password</Label>\r\n            <Input\r\n              required\r\n              className=\"light-grey-background tradeHub-input\"\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />{\" \"}\r\n          </FormGroup>\r\n          <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n            {errorMessageShown ? (\r\n              <div className=\"error-text mb-2 text-center font-weight-bold\">\r\n                Felaktigt användarnamn eller lösenord{\" \"}\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <Button className=\"tradeHub-button col-xs-8 col-sm-12 col-md-12 col-lg-12 font-weight-bold\">\r\n              Logga in\r\n            </Button>\r\n          </FormGroup>\r\n        </Form>\r\n        <div className=\"text-center m-4\">\r\n          <p className=\"font-italic mb-0\">Har du inte ett konto?</p>\r\n          <p className=\"font-italic\">\r\n            {\" \"}\r\n            Skapa konto{\" \"}\r\n            <span className=\"text-primary inline pointer\">\r\n              <span onClick={() => props.setIsRegistered(!props.isRegistered)}>\r\n                här\r\n              </span>\r\n            </span>\r\n          </p>\r\n        </div>\r\n      </ModalBody>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginModal;\r\n","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\RegisterModal.js",[],"C:\\cat-forum\\frontend\\src\\components\\UserInformationModal.js",["99","100","101","102","103","104","105","106","107","108"],"C:\\cat-forum\\frontend\\src\\components\\ModeratorButtonStyle.js",[],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":1,"column":32,"nodeType":"115","messageId":"116","endLine":1,"endColumn":42},{"ruleId":"113","severity":1,"message":"117","line":1,"column":44,"nodeType":"115","messageId":"116","endLine":1,"endColumn":53},{"ruleId":"113","severity":1,"message":"118","line":45,"column":7,"nodeType":"115","messageId":"116","endLine":45,"endColumn":12},{"ruleId":"119","severity":1,"message":"120","line":58,"column":24,"nodeType":"121","messageId":"122","endLine":58,"endColumn":26},{"ruleId":"123","severity":1,"message":"124","line":81,"column":6,"nodeType":"125","endLine":81,"endColumn":8,"suggestions":"126"},{"ruleId":"127","severity":1,"message":"128","line":117,"column":28,"nodeType":"129","messageId":"130","endLine":117,"endColumn":30},{"ruleId":"127","severity":1,"message":"128","line":117,"column":57,"nodeType":"129","messageId":"130","endLine":117,"endColumn":59},{"ruleId":"113","severity":1,"message":"131","line":15,"column":7,"nodeType":"115","messageId":"116","endLine":15,"endColumn":14},{"ruleId":"113","severity":1,"message":"132","line":33,"column":12,"nodeType":"115","messageId":"116","endLine":33,"endColumn":22},{"ruleId":"113","severity":1,"message":"133","line":39,"column":12,"nodeType":"115","messageId":"116","endLine":39,"endColumn":15},{"ruleId":"123","severity":1,"message":"134","line":27,"column":6,"nodeType":"125","endLine":27,"endColumn":8,"suggestions":"135"},{"ruleId":"113","severity":1,"message":"136","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":25},{"ruleId":"123","severity":1,"message":"137","line":10,"column":6,"nodeType":"125","endLine":10,"endColumn":8,"suggestions":"138"},{"ruleId":"113","severity":1,"message":"139","line":8,"column":26,"nodeType":"115","messageId":"116","endLine":8,"endColumn":38},{"ruleId":"113","severity":1,"message":"118","line":35,"column":10,"nodeType":"115","messageId":"116","endLine":35,"endColumn":15},{"ruleId":"113","severity":1,"message":"140","line":9,"column":11,"nodeType":"115","messageId":"116","endLine":9,"endColumn":18},{"ruleId":"113","severity":1,"message":"141","line":6,"column":3,"nodeType":"115","messageId":"116","endLine":6,"endColumn":7},{"ruleId":"113","severity":1,"message":"142","line":7,"column":3,"nodeType":"115","messageId":"116","endLine":7,"endColumn":12},{"ruleId":"113","severity":1,"message":"143","line":8,"column":3,"nodeType":"115","messageId":"116","endLine":8,"endColumn":8},{"ruleId":"113","severity":1,"message":"144","line":9,"column":3,"nodeType":"115","messageId":"116","endLine":9,"endColumn":8},{"ruleId":"113","severity":1,"message":"145","line":10,"column":3,"nodeType":"115","messageId":"116","endLine":10,"endColumn":14},{"ruleId":"113","severity":1,"message":"146","line":68,"column":20,"nodeType":"115","messageId":"116","endLine":68,"endColumn":26},{"ruleId":"113","severity":1,"message":"146","line":74,"column":6,"nodeType":"115","messageId":"116","endLine":74,"endColumn":12},{"ruleId":"113","severity":1,"message":"146","line":83,"column":9,"nodeType":"115","messageId":"116","endLine":83,"endColumn":15},{"ruleId":"123","severity":1,"message":"147","line":89,"column":6,"nodeType":"125","endLine":89,"endColumn":8,"suggestions":"148"},{"ruleId":"123","severity":1,"message":"149","line":96,"column":6,"nodeType":"125","endLine":96,"endColumn":24,"suggestions":"150"},"no-native-reassign",["151"],"no-negated-in-lhs",["152"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'reply' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchReplies', 'isLoggedInUserModeratorForThread', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["153"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'catLogo' is assigned a value but never used.","'goToMyPage' is assigned a value but never used.","'res' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchThreads'. Either include it or remove the dependency array.",["154"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchSubjects'. Either include it or remove the dependency array.",["155"],"'chosenThread' is assigned a value but never used.","'setUser' is assigned a value but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'ModalFooter' is defined but never used.","'result' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUserByUsername'. Either include it or remove the dependency array.",["156"],"React Hook useEffect has a missing dependency: 'getAllThreads'. Either include it or remove the dependency array.",["157"],"no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},"Update the dependencies array to be: [fetchReplies, isLoggedInUserModeratorForThread, user]",{"range":"168","text":"169"},"Update the dependencies array to be: [fetchThreads]",{"range":"170","text":"171"},"Update the dependencies array to be: [fetchSubjects]",{"range":"172","text":"173"},"Update the dependencies array to be: [fetchUserByUsername]",{"range":"174","text":"175"},"Update the dependencies array to be: [getAllThreads, moderatedThreads]",{"range":"176","text":"177"},[2061,2063],"[fetchReplies, isLoggedInUserModeratorForThread, user]",[844,846],"[fetchThreads]",[320,322],"[fetchSubjects]",[2406,2408],"[fetchUserByUsername]",[2568,2586],"[getAllThreads, moderatedThreads]"]