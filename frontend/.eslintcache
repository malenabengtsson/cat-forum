[{"C:\\cat-forum\\frontend\\src\\index.js":"1","C:\\cat-forum\\frontend\\src\\App.js":"2","C:\\cat-forum\\frontend\\src\\contexts\\SubjectContextProvider.js":"3","C:\\cat-forum\\frontend\\src\\components\\ReplyList.js":"4","C:\\cat-forum\\frontend\\src\\pages\\Home.js":"5","C:\\cat-forum\\frontend\\src\\components\\Header.js":"6","C:\\cat-forum\\frontend\\src\\components\\ThreadList.js":"7","C:\\cat-forum\\frontend\\src\\contexts\\UserContextProvider.js":"8","C:\\cat-forum\\frontend\\src\\components\\ReplyItem.js":"9","C:\\cat-forum\\frontend\\src\\components\\SubjectList.js":"10","C:\\cat-forum\\frontend\\src\\components\\ThreadItem.js":"11","C:\\cat-forum\\frontend\\src\\components\\CreateNewThreadModal.js":"12","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\AuthenticationModal.js":"13","C:\\cat-forum\\frontend\\src\\components\\SubjectItem.js":"14","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\LoginModal.js":"15","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\RegisterModal.js":"16","C:\\cat-forum\\frontend\\src\\components\\UserInformationModal.js":"17","C:\\cat-forum\\frontend\\src\\components\\ModeratorButtonStyle.js":"18"},{"size":209,"mtime":1608300270953,"results":"19","hashOfConfig":"20"},{"size":1015,"mtime":1609353527385,"results":"21","hashOfConfig":"20"},{"size":779,"mtime":1608316020731,"results":"22","hashOfConfig":"20"},{"size":4319,"mtime":1610036634025,"results":"23","hashOfConfig":"20"},{"size":195,"mtime":1608300270954,"results":"24","hashOfConfig":"20"},{"size":2734,"mtime":1610026089848,"results":"25","hashOfConfig":"20"},{"size":1504,"mtime":1610021871747,"results":"26","hashOfConfig":"20"},{"size":813,"mtime":1609142784165,"results":"27","hashOfConfig":"20"},{"size":3056,"mtime":1610037106308,"results":"28","hashOfConfig":"20"},{"size":506,"mtime":1610036168435,"results":"29","hashOfConfig":"20"},{"size":864,"mtime":1610012188181,"results":"30","hashOfConfig":"20"},{"size":2723,"mtime":1610051704853,"results":"31","hashOfConfig":"20"},{"size":1028,"mtime":1610038140314,"results":"32","hashOfConfig":"20"},{"size":827,"mtime":1610012193329,"results":"33","hashOfConfig":"20"},{"size":3405,"mtime":1610037529308,"results":"34","hashOfConfig":"20"},{"size":4276,"mtime":1610051470269,"results":"35","hashOfConfig":"20"},{"size":5815,"mtime":1610036184073,"results":"36","hashOfConfig":"20"},{"size":714,"mtime":1609710821620,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"w4ozw0",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\cat-forum\\frontend\\src\\index.js",[],["82","83"],"C:\\cat-forum\\frontend\\src\\App.js",[],"C:\\cat-forum\\frontend\\src\\contexts\\SubjectContextProvider.js",["84","85"],"import React, { createContext, useContext, useEffect, useState } from \"react\";\r\n\r\nexport const SubjectContext = createContext();\r\n\r\nconst SubjectContextProvider = (props) => {\r\nconst [chosenSubject, setChosenSubject] = useState('')\r\nconst [chosenThread, setChosenThread] = useState('');\r\nconst [subjects, setSubjects] = useState('')\r\n\r\nconst fetchSubjects = async () => {\r\n  let result = await fetch(\"/rest/subjects\");\r\n  result = await result.json();\r\n  setSubjects(result);\r\n};\r\n\r\n  const values = {\r\n    subjects,\r\n    chosenSubject,\r\n    setChosenSubject,\r\n    fetchSubjects,\r\n    chosenThread,\r\n    setChosenThread\r\n  };\r\n\r\n  return (\r\n    <SubjectContext.Provider value={values}>{props.children}</SubjectContext.Provider>\r\n  );\r\n};\r\nexport default SubjectContextProvider;\r\n","C:\\cat-forum\\frontend\\src\\components\\ReplyList.js",["86","87","88"],"import React, { useContext, useState, useEffect } from 'react'\r\nimport {\r\n  Alert,\r\n  Button,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Card,\r\n  CardText,\r\n  CardBody,\r\n  CardTitle,\r\n  CardFooter,\r\n} from \"reactstrap\";\r\nimport {SubjectContext} from '../contexts/SubjectContextProvider'\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nimport ReplyItem from './ReplyItem'\r\n\r\nconst ReplyList = () =>{\r\n  const [replies, setReplies] = useState(null)\r\n  const [newReply, setNewReply] = useState('')\r\n  const [threadIsLocked, setThreadIsLocked] = useState(false);\r\n  const [warningReply, setWarningReply] = useState(false)\r\n  const {chosenThread} = useContext(SubjectContext);\r\n  const {user} = useContext(UserContext);\r\n  const [isModerator, setIsModerator] = useState('')\r\n\r\n  console.log('Warning', warningReply);\r\n  const fetchReplies = async () =>{\r\n    let result = await fetch('/rest/replies/' + chosenThread.id)\r\n    result = await result.json();\r\n    setReplies(result)\r\n\r\n    if(chosenThread.locked === 1){\r\n      setThreadIsLocked(true)\r\n    }\r\n  }\r\n\r\n  const sendReply = async (e) =>{\r\ne.preventDefault()\r\n let replyInformation = {\r\n   message: newReply,\r\n   sender: user.username,\r\n   warning: warningReply === true ? 1 : 0\r\n };\r\n               \r\n  let reply = await fetch(\"/rest/replies/\" + chosenThread.id, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(replyInformation),\r\n  });\r\n  setNewReply('')\r\n  fetchReplies()\r\n  }\r\n\r\n  const isLoggedInUserModeratorForThread = async () =>{\r\nlet result = await fetch(\"/rest/moderator/\" + user.id);\r\nresult = await result.json();\r\n\r\nresult.map((thread, i) => {\r\n  if(thread.id === chosenThread.id){\r\n    setIsModerator(true)\r\n  }\r\n})\r\n}\r\n\r\nconst lockThread = async () => {\r\n  console.log('In lock');\r\n  await fetch('/rest/lockThread/' + chosenThread.id)\r\n  setThreadIsLocked(true);\r\n}\r\n\r\nconst toggleWarningReply = () => {\r\nsetWarningReply(!warningReply)\r\n}\r\n\r\n  useEffect(() => {\r\n  fetchReplies()\r\n if(user != null){\r\n    isLoggedInUserModeratorForThread()\r\n  }\r\n\r\n  return () =>{\r\n    console.log('in return');\r\n    setWarningReply(false)\r\n    console.log(warningReply);\r\n  }\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"m-4\">{chosenThread.title}</h2>\r\n      {replies &&\r\n        replies.map((reply, i) => {\r\n          return (\r\n            <ReplyItem\r\n              reply={reply}\r\n              key={i}\r\n              isModerator={isModerator}\r\n              fetchReplies={fetchReplies}\r\n              warningReply={warningReply}\r\n            />\r\n          );\r\n        })}\r\n      {user ? (\r\n        chosenThread && threadIsLocked === false ? (\r\n          <div className=\"m-4\">\r\n            <Card className=\"bgc-sand\">\r\n              <CardBody className=\"bgc-sand\">\r\n                <CardTitle tag=\"h5\">Write a reply</CardTitle>\r\n                <CardText>\r\n                  <Form onSubmit={sendReply}>\r\n                    <FormGroup>\r\n                      <Input\r\n                        type=\"textarea\"\r\n                        placeholder=\"Write your reply here...\"\r\n                        value={newReply}\r\n                        onChange={(e) => setNewReply(e.target.value)}\r\n                        required\r\n                      />\r\n                    </FormGroup>\r\n                    <Button className=\"bgc-yellow button-style\">\r\n                      Send reply\r\n                    </Button>\r\n                  </Form>\r\n                </CardText>\r\n              </CardBody>\r\n              {isModerator ||\r\n              (user.userRole === \"admin\" && threadIsLocked === false) ? (\r\n                <CardFooter className=\"text-muted\">\r\n                  <p className=\"m-0 pointer\" onClick={() => lockThread()}>\r\n                    Lock thread\r\n                  </p>\r\n                  <Button\r\n                    onClick={() => toggleWarningReply()}\r\n                    active={warningReply}\r\n                  >\r\n                    Warning\r\n                  </Button>\r\n                </CardFooter>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </Card>\r\n          </div>\r\n        ) : (\r\n          <Alert color=\"danger\">Thread has been locked</Alert>\r\n        )\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default ReplyList","C:\\cat-forum\\frontend\\src\\pages\\Home.js",[],"C:\\cat-forum\\frontend\\src\\components\\Header.js",["89"],"import React, {useState, useContext} from 'react'\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from 'reactstrap';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nimport AuthenticationModal from './AuthenticationModals/AuthenticationModal'\r\nimport UserInformationModal from './UserInformationModal'\r\nimport catLogo from '../images/catforum.png'\r\n\r\nconst Header = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n     const { user, setUser } = useContext(UserContext);\r\n     const [userModal, setUserModal] = useState(false);\r\n     const Usertoggle = () => setUserModal(!userModal);\r\n\r\n  let history = useHistory();\r\n  const toggle = () => setIsOpen(!isOpen);\r\n   const toggleModal = () => {\r\n     setModalIsOpen(!modalIsOpen);\r\n   };\r\n\r\n    const goToHomePage = () => {\r\n      history.push(\"/\");\r\n    };\r\n  \r\n\r\n     const logout = async () => {\r\n       await fetch(\"/auth/logout\");\r\n       setUser(null);\r\n       history.push(\"/\");\r\n     };\r\n    \r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand onClick={goToHomePage} className=\"pointer\">\r\n          <img src={catLogo}\r\n          />\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            {user === null ? (\r\n              <>\r\n                <NavItem>\r\n                  <NavLink className=\"pointer\" onClick={toggleModal}>\r\n                    Logga in\r\n                  </NavLink>\r\n                  <AuthenticationModal\r\n                    modalIsOpen={modalIsOpen}\r\n                    toggleModal={toggleModal}\r\n                    setModalIsOpen={setModalIsOpen}\r\n                  />\r\n                </NavItem>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <NavItem className=\"\">\r\n                  <NavLink className=\"pointer\" onClick={Usertoggle}>\r\n                    Min sida\r\n                  </NavLink>\r\n                  <UserInformationModal\r\n                    toggle={Usertoggle}\r\n                    modal={userModal}\r\n                    setModal={setUserModal}\r\n                    username={user.username}\r\n                  />\r\n                </NavItem>\r\n                <NavItem className=\"\">\r\n                  <NavLink className=\"pointer\" onClick={logout}>\r\n                    Logga ut\r\n                  </NavLink>\r\n                </NavItem>\r\n              </>\r\n            )}\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\nexport default Header;","C:\\cat-forum\\frontend\\src\\components\\ThreadList.js",["90"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport {\r\n Button\r\n} from 'reactstrap';\r\nimport { SubjectContext } from '../contexts/SubjectContextProvider'\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nimport ThreadItem from './ThreadItem'\r\nimport CreateNewThreadModal from './CreateNewThreadModal'\r\n\r\nconst ThreadList = () =>{\r\n  const { chosenSubject } = useContext(SubjectContext);\r\n  const {user} = useContext(UserContext)\r\n  const [threads, setThreads] = useState(null);\r\n\r\n  const [modal, setModal] = useState(false);\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const fetchThreads = async () =>{\r\n    let result = await fetch('/rest/threads/' + chosenSubject.id)\r\n    result = await result.json();\r\n    console.log(result);\r\n    setThreads(result);\r\n  }\r\n\r\n  useEffect(() => {\r\n   fetchThreads()\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"m-4\">\r\n      {user ? (\r\n        <div className=\"m-4\">\r\n          <Button\r\n            className=\"bgc-yellow button-style\"\r\n            onClick={toggle}\r\n          >\r\n            Create new thread\r\n          </Button>\r\n          <CreateNewThreadModal\r\n            toggle={toggle}\r\n            modal={modal}\r\n            setModal={setModal}\r\n            fetchThreads={fetchThreads}\r\n          />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {threads &&\r\n        threads.map((thread, i) => {\r\n          return <ThreadItem thread={thread} key={i} />;\r\n        })}\r\n    </div>\r\n  );\r\n}\r\nexport default ThreadList;","C:\\cat-forum\\frontend\\src\\contexts\\UserContextProvider.js",[],"C:\\cat-forum\\frontend\\src\\components\\ReplyItem.js",[],"C:\\cat-forum\\frontend\\src\\components\\SubjectList.js",["91"],"import React, { useEffect, useContext } from 'react'\r\nimport SubjectItem from './SubjectItem'\r\nimport { SubjectContext} from '../contexts/SubjectContextProvider'\r\n\r\nconst SubjectList = () => {\r\n  const { fetchSubjects, subjects } = useContext(SubjectContext)\r\n\r\n  useEffect(() => {\r\n    fetchSubjects();\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {subjects && subjects.map((subject, i) => {\r\n       return <SubjectItem subject={subject} key={i}/> \r\n      })}\r\n    </div>\r\n  )\r\n}\r\nexport default SubjectList;","C:\\cat-forum\\frontend\\src\\components\\ThreadItem.js",[],"C:\\cat-forum\\frontend\\src\\components\\CreateNewThreadModal.js",["92","93"],"C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\AuthenticationModal.js",[],"C:\\cat-forum\\frontend\\src\\components\\SubjectItem.js",[],"C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\LoginModal.js",["94"],"import React, { useState, useContext } from \"react\";\r\nimport { UserContext } from \"../../contexts/UserContextProvider\";\r\nimport { Button, ModalBody, Form, FormGroup, Label, Input } from \"reactstrap\";\r\n\r\nconst LoginModal = (props) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessageShown, setErrorMessageShown] = useState(false);\r\n  const { setUser, fetchUser } = useContext(UserContext);\r\n\r\n\r\n  const performLogin = async (e) => {\r\n    console.log('In login method in frontend');\r\n    e.preventDefault();\r\n\r\n    const credentials =\r\n     {email: email,\r\n      password: password\r\n    }\r\n    console.log(credentials);\r\n\r\n   let result = await fetch(\"/auth/login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n    result = await result.json()\r\n   console.log(result);\r\n    if(result != null){\r\n      fetchUser();\r\n      setErrorMessageShown(false);\r\n      props.setModalIsOpen(!props.modalIsOpen);\r\n      setErrorMessageShown(false)\r\n    }\r\n    else{\r\n      setErrorMessageShown(true)\r\n\r\n    }\r\n    \r\n  };\r\n  return (\r\n    <div className=\"row mx-auto authentication-modals\">\r\n      <h2 className=\"text-center mt-4 font-weight-bold col-12\">Logga in</h2>\r\n      <ModalBody className=\"\">\r\n        <Form onSubmit={performLogin}>\r\n          <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 m-0\">\r\n            <Label for=\"emailAddress\" className=\" font-weight-bold\">\r\n              Email\r\n            </Label>\r\n            <Input\r\n              required\r\n              className=\"\"\r\n              type=\"email\"\r\n              placeholder=\"Email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n            <Label className=\"font-weight-bold\" for=\"password\">\r\n              Password\r\n            </Label>\r\n            <Input\r\n              required\r\n              className=\"\"\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />{\" \"}\r\n          </FormGroup>\r\n          <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n            {errorMessageShown ? (\r\n              <div className=\"error-text mb-2 text-center font-weight-bold\">\r\n                Wrong username or password{\" \"}\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <Button className=\"bgc-yellow button-style col-xs-8 col-sm-12 col-md-12 col-lg-12 font-weight-bold\">\r\n              Logga in\r\n            </Button>\r\n          </FormGroup>\r\n        </Form>\r\n        <div className=\"text-center m-4\">\r\n          <p className=\"font-italic mb-0\">Har du inte ett konto?</p>\r\n          <p className=\"font-italic\">\r\n            {\" \"}\r\n            Skapa konto{\" \"}\r\n            <span className=\"text-primary inline pointer\">\r\n              <span\r\n                className=\"pointer\"\r\n                onClick={() => props.setIsRegistered(!props.isRegistered)}\r\n              >\r\n                här\r\n              </span>\r\n            </span>\r\n          </p>\r\n        </div>\r\n      </ModalBody>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginModal;\r\n","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\RegisterModal.js",[],"C:\\cat-forum\\frontend\\src\\components\\UserInformationModal.js",["95","96","97","98","99"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n} from \"reactstrap\";\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nimport ModeratorButtonStyle from './ModeratorButtonStyle'\r\n\r\nconst UserInformationModal = (props) => {\r\n  const [clickedUser, setClickedUser] = useState('')\r\n  const [moderatedThreads, setModeratedThreads] = useState('')\r\n  const { user } = useContext(UserContext);\r\n  const [showAddModeratorInformation, setShowAddModeratorInformation] = useState(false);\r\n  const [showRemoveModeratorInformation, setShowRemoveModeratorInformation] = useState(false);\r\n  const [unModeratedThreads, setUnModeratedThreads] = useState('');\r\n\r\n  const fetchUserByUsername = async () =>{\r\n    if(showRemoveModeratorInformation){\r\n      setShowRemoveModeratorInformation(false)\r\n    }\r\n    let result = await fetch('/rest/' + props.username);\r\n    result = await result.json();\r\n    console.log(result);\r\n\r\n    if(result != null){\r\n      setClickedUser(result)\r\n      getModeratorInformation(result)\r\n    }\r\n    else{\r\n      setClickedUser(null)\r\n    }\r\n    \r\n  }\r\n\r\n  const getModeratorInformation = async (user) => {\r\nlet result = await fetch('/rest/moderator/' + user.id)\r\nresult = await result.json()\r\nsetModeratedThreads(result)\r\nconsole.log(result);\r\n\r\n  }\r\n\r\n  const getAllThreads = async () =>{\r\n    let result = await fetch('/rest/threads')\r\n    result = await result.json()\r\n\r\n for (let i = 0; i < moderatedThreads.length; i++) {\r\n   for (let j = 0; j < result.length; j++) {\r\n     if(result[j].id === moderatedThreads[i].id){\r\n       result.splice(j, 1)\r\n     }\r\n   }\r\n }\r\n    setUnModeratedThreads(result);\r\n\r\n  }\r\n\r\n  const removeAsModeratorFor= async (thread) =>{\r\n    let result = await fetch(\r\n      \"/rest/removeModerator/\" + clickedUser.id + \"/\" + thread.id\r\n    );\r\n    result = await result.json()\r\n   fetchUserByUsername()\r\n  }\r\n\r\n  const addAsModerator = async (thread) =>{\r\n    console.log('in function');\r\n let result = await fetch(\r\n   \"/rest/addModerator/\" + clickedUser.id + \"/\" + thread.id\r\n );\r\nfetchUserByUsername();\r\n\r\n  }\r\n\r\n  const removeUser = async () =>{\r\n    console.log('in delete');\r\n    let result = await fetch('/rest/deleteUser/' + clickedUser.id)\r\n    fetchUserByUsername()\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchUserByUsername()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if(moderatedThreads != null && moderatedThreads !== undefined && moderatedThreads !== ''){\r\n      getAllThreads();\r\n\r\n    }\r\n  }, [moderatedThreads])\r\n\r\n  return (\r\n    <div className=\"row mx-auto\">\r\n      <Modal isOpen={props.modal} toggle={props.toggle}>\r\n        <h2 className=\"text-center mt-4 tradeHub-orange font-weight-bold col-12\">\r\n          {clickedUser ? clickedUser.username : \"User have been deleted\"}{\" \"}\r\n        </h2>\r\n        <ModalBody className=\"\">\r\n          {clickedUser ? (\r\n            <div>\r\n              {moderatedThreads &&\r\n                moderatedThreads.map((x) => (\r\n                  <ModeratorButtonStyle thread={x} title={\"MODERATOR\"} />\r\n                ))}\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {user && user.userRole === \"admin\" && clickedUser != null ? (\r\n            <div>\r\n              <Button\r\n                className=\"bgc-yellow button-style col-4\"\r\n                onClick={() => removeUser()}\r\n              >\r\n                Remove user\r\n              </Button>\r\n              {clickedUser && clickedUser.userRole === \"moderator\" ? (\r\n                <div>\r\n                  <Button\r\n                    onClick={() =>\r\n                      setShowRemoveModeratorInformation(\r\n                        !showRemoveModeratorInformation\r\n                      )\r\n                    }\r\n                  >\r\n                    Remove as moderator\r\n                  </Button>{\" \"}\r\n                  <Button\r\n                    className=\"col-4 bgc-yellow button-style\"\r\n                    onClick={() =>\r\n                      setShowAddModeratorInformation(\r\n                        !showAddModeratorInformation\r\n                      )\r\n                    }\r\n                  >\r\n                    Add as moderator\r\n                  </Button>\r\n                </div>\r\n              ) : (\r\n                <Button\r\n                  className=\"col-4 bgc-yellow button-style\"\r\n                  onClick={() =>\r\n                    setShowAddModeratorInformation(!showAddModeratorInformation)\r\n                  }\r\n                >\r\n                  Add as moderator\r\n                </Button>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {showRemoveModeratorInformation ? (\r\n            <div>\r\n              <h6>\r\n                Click on the thread to remove {clickedUser.username} as a\r\n                moderator\r\n              </h6>\r\n\r\n              {moderatedThreads &&\r\n                moderatedThreads.map((x) => (\r\n                  <div onClick={() => removeAsModeratorFor(x)}>\r\n                    <ModeratorButtonStyle thread={x} title={\"REMOVE\"} />\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {showAddModeratorInformation ? (\r\n            <div>\r\n              <h6>\r\n                Click on the thread to add {clickedUser.username} as a moderator\r\n              </h6>\r\n              {unModeratedThreads &&\r\n                unModeratedThreads.map((x) => (\r\n                  <div onClick={() => addAsModerator(x)}>\r\n                    <ModeratorButtonStyle thread={x} title={\"ADD\"} />\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\nexport default UserInformationModal","C:\\cat-forum\\frontend\\src\\components\\ModeratorButtonStyle.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":1,"column":32,"nodeType":"106","messageId":"107","endLine":1,"endColumn":42},{"ruleId":"104","severity":1,"message":"108","line":1,"column":44,"nodeType":"106","messageId":"107","endLine":1,"endColumn":53},{"ruleId":"104","severity":1,"message":"109","line":46,"column":7,"nodeType":"106","messageId":"107","endLine":46,"endColumn":12},{"ruleId":"110","severity":1,"message":"111","line":59,"column":24,"nodeType":"112","messageId":"113","endLine":59,"endColumn":26},{"ruleId":"114","severity":1,"message":"115","line":87,"column":6,"nodeType":"116","endLine":87,"endColumn":8,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":45,"column":11,"nodeType":"120","endLine":46,"endColumn":13},{"ruleId":"114","severity":1,"message":"121","line":27,"column":6,"nodeType":"116","endLine":27,"endColumn":8,"suggestions":"122"},{"ruleId":"114","severity":1,"message":"123","line":10,"column":6,"nodeType":"116","endLine":10,"endColumn":8,"suggestions":"124"},{"ruleId":"104","severity":1,"message":"125","line":8,"column":26,"nodeType":"106","messageId":"107","endLine":8,"endColumn":38},{"ruleId":"104","severity":1,"message":"109","line":36,"column":10,"nodeType":"106","messageId":"107","endLine":36,"endColumn":15},{"ruleId":"104","severity":1,"message":"126","line":9,"column":11,"nodeType":"106","messageId":"107","endLine":9,"endColumn":18},{"ruleId":"104","severity":1,"message":"127","line":63,"column":20,"nodeType":"106","messageId":"107","endLine":63,"endColumn":26},{"ruleId":"104","severity":1,"message":"127","line":69,"column":6,"nodeType":"106","messageId":"107","endLine":69,"endColumn":12},{"ruleId":"104","severity":1,"message":"127","line":78,"column":9,"nodeType":"106","messageId":"107","endLine":78,"endColumn":15},{"ruleId":"114","severity":1,"message":"128","line":84,"column":6,"nodeType":"116","endLine":84,"endColumn":8,"suggestions":"129"},{"ruleId":"114","severity":1,"message":"130","line":91,"column":6,"nodeType":"116","endLine":91,"endColumn":24,"suggestions":"131"},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'reply' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchReplies', 'isLoggedInUserModeratorForThread', 'user', and 'warningReply'. Either include them or remove the dependency array.","ArrayExpression",["134"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'fetchThreads'. Either include it or remove the dependency array.",["135"],"React Hook useEffect has a missing dependency: 'fetchSubjects'. Either include it or remove the dependency array.",["136"],"'chosenThread' is assigned a value but never used.","'setUser' is assigned a value but never used.","'result' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUserByUsername'. Either include it or remove the dependency array.",["137"],"React Hook useEffect has a missing dependency: 'getAllThreads'. Either include it or remove the dependency array.",["138"],"no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},"Update the dependencies array to be: [fetchReplies, isLoggedInUserModeratorForThread, user, warningReply]",{"range":"149","text":"150"},"Update the dependencies array to be: [fetchThreads]",{"range":"151","text":"152"},"Update the dependencies array to be: [fetchSubjects]",{"range":"153","text":"154"},"Update the dependencies array to be: [fetchUserByUsername]",{"range":"155","text":"156"},"Update the dependencies array to be: [getAllThreads, moderatedThreads]",{"range":"157","text":"158"},[2197,2199],"[fetchReplies, isLoggedInUserModeratorForThread, user, warningReply]",[844,846],"[fetchThreads]",[310,312],"[fetchSubjects]",[2348,2350],"[fetchUserByUsername]",[2510,2528],"[getAllThreads, moderatedThreads]"]