[{"C:\\cat-forum\\frontend\\src\\index.js":"1","C:\\cat-forum\\frontend\\src\\App.js":"2","C:\\cat-forum\\frontend\\src\\contexts\\SubjectContextProvider.js":"3","C:\\cat-forum\\frontend\\src\\components\\ReplyList.js":"4","C:\\cat-forum\\frontend\\src\\pages\\Home.js":"5","C:\\cat-forum\\frontend\\src\\components\\Header.js":"6","C:\\cat-forum\\frontend\\src\\components\\ThreadList.js":"7","C:\\cat-forum\\frontend\\src\\contexts\\UserContextProvider.js":"8","C:\\cat-forum\\frontend\\src\\components\\ReplyItem.js":"9","C:\\cat-forum\\frontend\\src\\components\\SubjectList.js":"10","C:\\cat-forum\\frontend\\src\\components\\ThreadItem.js":"11","C:\\cat-forum\\frontend\\src\\components\\CreateNewThreadModal.js":"12","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\AuthenticationModal.js":"13","C:\\cat-forum\\frontend\\src\\components\\SubjectItem.js":"14","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\LoginModal.js":"15","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\RegisterModal.js":"16","C:\\cat-forum\\frontend\\src\\components\\UserInformationModal.js":"17","C:\\cat-forum\\frontend\\src\\components\\ModeratorButtonStyle.js":"18"},{"size":209,"mtime":1608300270953,"results":"19","hashOfConfig":"20"},{"size":1015,"mtime":1609353527385,"results":"21","hashOfConfig":"20"},{"size":779,"mtime":1608316020731,"results":"22","hashOfConfig":"20"},{"size":2078,"mtime":1609146844332,"results":"23","hashOfConfig":"20"},{"size":195,"mtime":1608300270954,"results":"24","hashOfConfig":"20"},{"size":2504,"mtime":1609142784162,"results":"25","hashOfConfig":"20"},{"size":1372,"mtime":1609146530539,"results":"26","hashOfConfig":"20"},{"size":813,"mtime":1609142784165,"results":"27","hashOfConfig":"20"},{"size":1181,"mtime":1609249449404,"results":"28","hashOfConfig":"20"},{"size":516,"mtime":1608304650881,"results":"29","hashOfConfig":"20"},{"size":830,"mtime":1609240292786,"results":"30","hashOfConfig":"20"},{"size":2667,"mtime":1609146542544,"results":"31","hashOfConfig":"20"},{"size":1028,"mtime":1609142784159,"results":"32","hashOfConfig":"20"},{"size":824,"mtime":1609142784162,"results":"33","hashOfConfig":"20"},{"size":3255,"mtime":1609163247904,"results":"34","hashOfConfig":"20"},{"size":3963,"mtime":1609240595854,"results":"35","hashOfConfig":"20"},{"size":5193,"mtime":1609354845082,"results":"36","hashOfConfig":"20"},{"size":361,"mtime":1609353486402,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"w4ozw0",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"40"},"C:\\cat-forum\\frontend\\src\\index.js",[],["84","85"],"C:\\cat-forum\\frontend\\src\\App.js",[],"C:\\cat-forum\\frontend\\src\\contexts\\SubjectContextProvider.js",["86","87"],"import React, { createContext, useContext, useEffect, useState } from \"react\";\r\n\r\nexport const SubjectContext = createContext();\r\n\r\nconst SubjectContextProvider = (props) => {\r\nconst [chosenSubject, setChosenSubject] = useState('')\r\nconst [chosenThread, setChosenThread] = useState('');\r\nconst [subjects, setSubjects] = useState('')\r\n\r\nconst fetchSubjects = async () => {\r\n  let result = await fetch(\"/rest/subjects\");\r\n  result = await result.json();\r\n  setSubjects(result);\r\n};\r\n\r\n  const values = {\r\n    subjects,\r\n    chosenSubject,\r\n    setChosenSubject,\r\n    fetchSubjects,\r\n    chosenThread,\r\n    setChosenThread\r\n  };\r\n\r\n  return (\r\n    <SubjectContext.Provider value={values}>{props.children}</SubjectContext.Provider>\r\n  );\r\n};\r\nexport default SubjectContextProvider;\r\n","C:\\cat-forum\\frontend\\src\\components\\ReplyList.js",["88","89"],"import React, { useContext, useState, useEffect } from 'react'\r\nimport { Button, Form, FormGroup, Input,Card, CardText, CardBody, CardTitle } from \"reactstrap\";\r\nimport {SubjectContext} from '../contexts/SubjectContextProvider'\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nimport ReplyItem from './ReplyItem'\r\n\r\nconst ReplyList = () =>{\r\n  const [replies, setReplies] = useState(null)\r\n  const [newReply, setNewReply] = useState('')\r\n  const {chosenThread} = useContext(SubjectContext);\r\n  const {user} = useContext(UserContext);\r\n  \r\n  const fetchReplies = async () =>{\r\n    let result = await fetch('/rest/replies/' + chosenThread.id)\r\n    result = await result.json();\r\n    setReplies(result)\r\n  }\r\n\r\n  const sendReply = async (e) =>{\r\ne.preventDefault()\r\n let replyInformation = {\r\n   message: newReply,\r\n   sender: user.username,\r\n };\r\n  let reply = await fetch(\"/rest/replies/\" + chosenThread.id, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(replyInformation),\r\n  });\r\n  setNewReply('')\r\n  fetchReplies()\r\n  }\r\n\r\n  useEffect(() => {\r\n  fetchReplies()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {replies &&\r\n        replies.map((reply, i) => {\r\n          return <ReplyItem reply={reply} key={i} />;\r\n        })}\r\n      {user ? (\r\n        <div className=\"m-4\">\r\n          <Card>\r\n            <CardBody>\r\n              <CardTitle tag=\"h5\">Write a reply</CardTitle>\r\n              <CardText>\r\n                <Form onSubmit={sendReply}>\r\n                  <FormGroup>\r\n                    <Input\r\n                      type=\"textarea\"\r\n                      placeholder=\"Write your reply here...\"\r\n                      value={newReply}\r\n                      onChange={(e) => setNewReply(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                  <Button>Send reply</Button>\r\n                </Form>\r\n              </CardText>\r\n            </CardBody>\r\n          </Card>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default ReplyList","C:\\cat-forum\\frontend\\src\\pages\\Home.js",[],"C:\\cat-forum\\frontend\\src\\components\\Header.js",["90"],"import React, {useState, useContext} from 'react'\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from 'reactstrap';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nimport AuthenticationModal from './AuthenticationModals/AuthenticationModal'\r\n\r\nconst Header = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n     const { user, setUser } = useContext(UserContext);\r\n\r\n  let history = useHistory();\r\n  const toggle = () => setIsOpen(!isOpen);\r\n   const toggleModal = () => {\r\n     setModalIsOpen(!modalIsOpen);\r\n   };\r\n\r\n    const goToHomePage = () => {\r\n      history.push(\"/\");\r\n    };\r\n     const goToMyPage = () => {\r\n      // history.push(\"/mypage\");\r\n      console.log('Add mypage here');\r\n     };\r\n\r\n     const logout = async () => {\r\n       let res = await fetch(\"/auth/logout\");\r\n       setUser(null);\r\n       history.push(\"/\");\r\n     };\r\n    \r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand onClick={goToHomePage} className=\"pointer\">\r\n          Cat forum\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            {user === null ? (\r\n              <>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className=\"pointer\"\r\n                    onClick={toggleModal}\r\n                  >\r\n                    Logga in\r\n                  </NavLink>\r\n                  <AuthenticationModal\r\n                    modalIsOpen={modalIsOpen}\r\n                    toggleModal={toggleModal}\r\n                    setModalIsOpen={setModalIsOpen}\r\n                  />\r\n                </NavItem>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <NavItem className=\"\">\r\n                  <NavLink\r\n                    className=\"pointer\"\r\n                    onClick={goToMyPage}\r\n                  >\r\n                    Min sida\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem className=\"\">\r\n                  <NavLink className=\"pointer\" onClick={logout}>\r\n                    Logga ut\r\n                  </NavLink>\r\n                </NavItem>\r\n              </>\r\n            )}\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\nexport default Header;","C:\\cat-forum\\frontend\\src\\components\\ThreadList.js",["91"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport {\r\n Button\r\n} from 'reactstrap';\r\nimport { SubjectContext } from '../contexts/SubjectContextProvider'\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nimport ThreadItem from './ThreadItem'\r\nimport CreateNewThreadModal from './CreateNewThreadModal'\r\n\r\nconst ThreadList = () =>{\r\n  const { chosenSubject } = useContext(SubjectContext);\r\n  const {user} = useContext(UserContext)\r\n  const [threads, setThreads] = useState(null);\r\n\r\n  const [modal, setModal] = useState(false);\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const fetchThreads = async () =>{\r\n    let result = await fetch('/rest/threads/' + chosenSubject.id)\r\n    result = await result.json();\r\n    console.log(result);\r\n    setThreads(result);\r\n  }\r\n\r\n  useEffect(() => {\r\n   fetchThreads()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {user ? (\r\n        <div>\r\n          <Button onClick={toggle}>Create new thread</Button>\r\n          <CreateNewThreadModal\r\n            toggle={toggle}\r\n            modal={modal}\r\n            setModal={setModal}\r\n            fetchThreads={fetchThreads}\r\n          />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {threads &&\r\n        threads.map((thread, i) => {\r\n          return <ThreadItem thread={thread} key={i} />;\r\n        })}\r\n    </div>\r\n  );\r\n}\r\nexport default ThreadList;","C:\\cat-forum\\frontend\\src\\contexts\\UserContextProvider.js",[],"C:\\cat-forum\\frontend\\src\\components\\ReplyItem.js",["92","93"],"import React, {useContext, useState} from 'react'\r\nimport { Card, CardText, CardBody, CardTitle } from \"reactstrap\";\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nimport UserInformationModal from './UserInformationModal'\r\nconst ReplyItem = ({reply}) =>{\r\n    const [modal, setModal] = useState(false);\r\n    const toggle = () => setModal(!modal);\r\n\r\nconst getDate = () =>{\r\n  let date = new Date(reply.timestamp)\r\n  let yearMonthAndDay = date.toLocaleDateString()\r\n   let hours = date.getHours();\r\n   let minutes = date.getMinutes()\r\n  \r\n   let finalDate =\r\n     yearMonthAndDay + \" \" + (hours < 10 ? \"0\" + hours : hours) + \":\" +( minutes < 10\r\n       ? \"0\" + minutes\r\n       : minutes);\r\n  \r\n  console.log(finalDate);\r\n\r\n  return finalDate;\r\n}\r\n  return (\r\n    <div className=\"m-4\">\r\n      <Card>\r\n        <CardBody>\r\n          <CardTitle tag=\"h5\">\r\n            <p onClick={toggle}>{reply.sender} <UserInformationModal toggle={toggle} modal={modal} setModal={setModal} username={reply.sender}/></p> {getDate()}\r\n          </CardTitle>\r\n          <CardText>{reply.message}</CardText>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\nexport default ReplyItem","C:\\cat-forum\\frontend\\src\\components\\SubjectList.js",["94","95"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport SubjectItem from './SubjectItem'\r\nimport { SubjectContext} from '../contexts/SubjectContextProvider'\r\n\r\nconst SubjectList = () => {\r\n  const { fetchSubjects, subjects } = useContext(SubjectContext)\r\n\r\n  useEffect(() => {\r\n    fetchSubjects();\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {subjects && subjects.map((subject, i) => {\r\n       return <SubjectItem subject={subject} key={i}/> \r\n      })}\r\n    </div>\r\n  )\r\n}\r\nexport default SubjectList;","C:\\cat-forum\\frontend\\src\\components\\ThreadItem.js",[],"C:\\cat-forum\\frontend\\src\\components\\CreateNewThreadModal.js",["96","97"],"import React, { useState, useContext } from \"react\";\r\nimport { Button, Modal, ModalBody, Form, FormGroup, Label, Input } from \"reactstrap\";\r\nimport {SubjectContext} from '../contexts/SubjectContextProvider'\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nconst CreateNewThreadModal = (props) => {\r\n  const [threadTitle, setThreadTitle] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const { chosenSubject, chosenThread } = useContext(SubjectContext)\r\n  const { user } = useContext(UserContext)\r\n\r\n  const createThread = async (e) => {\r\n    e.preventDefault()\r\n\r\n    let threadInformation = {\r\n      title: threadTitle,\r\n      creator: user.username\r\n    }\r\n\r\n   let replyInformation = {\r\n      message: message,\r\n      sender: user.username\r\n    }\r\n\r\n   let thread = await fetch(\"/rest/threads/\" + chosenSubject.id, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(threadInformation),\r\n   });\r\n    \r\n    thread = await thread.json();\r\n\r\n    console.log(thread);\r\n    console.log(thread.lastInsertRowid);\r\n\r\n     let reply = await fetch(\"/rest/replies/\" + thread.lastInsertRowid, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(replyInformation),\r\n   });\r\n   props.toggle()\r\n   props.fetchThreads()\r\n }\r\n  return (\r\n    <div className=\"row mx-auto\">\r\n      <Modal isOpen={props.modal} toggle={props.toggle} >\r\n      <h2 className=\"text-center mt-4 tradeHub-orange font-weight-bold col-12\">\r\n        Create new thread\r\n      </h2>\r\n      <ModalBody className=\"\">\r\n        <Form onSubmit={createThread}>\r\n          <FormGroup>\r\n            <Label\r\n              for=\"threadTitle\"\r\n            >\r\n              Title\r\n            </Label>\r\n            <Input\r\n              required\r\n              type=\"text\"\r\n              placeholder=\"Title\"\r\n              value={threadTitle}\r\n              onChange={(e) => setThreadTitle(e.target.value)}\r\n            />\r\n            </FormGroup>\r\n             <FormGroup>\r\n            <Label\r\n              for=\"threadTitle\"\r\n            >\r\n              Message\r\n            </Label>\r\n            <Input\r\n              required\r\n              type=\"textarea\"\r\n              placeholder=\"Message\"\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n            />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Button>\r\n                Create thread\r\n              </Button>\r\n            </FormGroup>\r\n        </Form>\r\n      </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateNewThreadModal;\r\n","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\AuthenticationModal.js",[],"C:\\cat-forum\\frontend\\src\\components\\SubjectItem.js",[],"C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\LoginModal.js",["98"],"import React, { useState, useContext } from \"react\";\r\nimport { UserContext } from \"../../contexts/UserContextProvider\";\r\nimport { Button, ModalBody, Form, FormGroup, Label, Input } from \"reactstrap\";\r\n\r\nconst LoginModal = (props) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errorMessageShown, setErrorMessageShown] = useState(false);\r\n  const { setUser, fetchUser } = useContext(UserContext);\r\n\r\n  const performLogin = async (e) => {\r\n    console.log('In login method in frontend');\r\n    e.preventDefault();\r\n\r\n    const credentials =\r\n     {email: email,\r\n      password: password\r\n    }\r\n    console.log(credentials);\r\n\r\n    await fetch(\"/auth/login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n      fetchUser();\r\n      setErrorMessageShown(false);\r\n      props.setModalIsOpen(!props.modalIsOpen);\r\n    \r\n  };\r\n  return (\r\n    <div className=\"row mx-auto authentication-modals\">\r\n      <h2 className=\"text-center mt-4 tradeHub-orange font-weight-bold col-12\">\r\n        Logga in\r\n      </h2>\r\n      <ModalBody className=\"\">\r\n        <Form onSubmit={performLogin}>\r\n          <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 m-0\">\r\n            <Label\r\n              for=\"emailAddress\"\r\n              className=\"tradeHub-dark-grey font-weight-bold\"\r\n            >\r\n              Email\r\n            </Label>\r\n            <Input\r\n              required\r\n              className=\"light-grey-background tradeHub-input\"\r\n              type=\"email\"\r\n              placeholder=\"Email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n            <Label for=\"password\">Password</Label>\r\n            <Input\r\n              required\r\n              className=\"light-grey-background tradeHub-input\"\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />{\" \"}\r\n          </FormGroup>\r\n          <FormGroup className=\"col-xs-8 col-sm-12 col-md-12 col-lg-12 mt-2\">\r\n            {errorMessageShown ? (\r\n              <div className=\"error-text mb-2 text-center font-weight-bold\">\r\n                Felaktigt användarnamn eller lösenord{\" \"}\r\n              </div>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <Button className=\"tradeHub-button col-xs-8 col-sm-12 col-md-12 col-lg-12 font-weight-bold\">\r\n              Logga in\r\n            </Button>\r\n          </FormGroup>\r\n        </Form>\r\n        <div className=\"text-center m-4\">\r\n          <p className=\"font-italic mb-0\">Har du inte ett konto?</p>\r\n          <p className=\"font-italic\">\r\n            {\" \"}\r\n            Skapa konto{\" \"}\r\n            <span className=\"text-primary inline pointer\">\r\n              <span onClick={() => props.setIsRegistered(!props.isRegistered)}>\r\n                här\r\n              </span>\r\n            </span>\r\n          </p>\r\n        </div>\r\n      </ModalBody>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginModal;\r\n","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\RegisterModal.js",[],"C:\\cat-forum\\frontend\\src\\components\\UserInformationModal.js",["99","100","101","102","103","104","105","106","107","108"],"C:\\cat-forum\\frontend\\src\\components\\ModeratorButtonStyle.js",["109"],"import React from 'react'\r\nimport { Card, CardText, CardBody, CardTitle } from \"reactstrap\";\r\n\r\n\r\nconst ModeratorButtonStyle = (props) =>{\r\n\r\n  return (\r\n    <div className=\"m-4 pointer\">\r\n      <Card>\r\n        <CardBody>\r\n          <CardText>{props.title}</CardText>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\nexport default ModeratorButtonStyle",{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":32,"nodeType":"116","messageId":"117","endLine":1,"endColumn":42},{"ruleId":"114","severity":1,"message":"118","line":1,"column":44,"nodeType":"116","messageId":"117","endLine":1,"endColumn":53},{"ruleId":"114","severity":1,"message":"119","line":25,"column":7,"nodeType":"116","messageId":"117","endLine":25,"endColumn":12},{"ruleId":"120","severity":1,"message":"121","line":36,"column":6,"nodeType":"122","endLine":36,"endColumn":8,"suggestions":"123"},{"ruleId":"114","severity":1,"message":"124","line":35,"column":12,"nodeType":"116","messageId":"117","endLine":35,"endColumn":15},{"ruleId":"120","severity":1,"message":"125","line":27,"column":6,"nodeType":"122","endLine":27,"endColumn":8,"suggestions":"126"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":16,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"127","line":3,"column":9,"nodeType":"116","messageId":"117","endLine":3,"endColumn":20},{"ruleId":"114","severity":1,"message":"128","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"120","severity":1,"message":"129","line":10,"column":6,"nodeType":"122","endLine":10,"endColumn":8,"suggestions":"130"},{"ruleId":"114","severity":1,"message":"131","line":8,"column":26,"nodeType":"116","messageId":"117","endLine":8,"endColumn":38},{"ruleId":"114","severity":1,"message":"119","line":35,"column":10,"nodeType":"116","messageId":"117","endLine":35,"endColumn":15},{"ruleId":"114","severity":1,"message":"132","line":9,"column":11,"nodeType":"116","messageId":"117","endLine":9,"endColumn":18},{"ruleId":"114","severity":1,"message":"133","line":6,"column":3,"nodeType":"116","messageId":"117","endLine":6,"endColumn":7},{"ruleId":"114","severity":1,"message":"134","line":7,"column":3,"nodeType":"116","messageId":"117","endLine":7,"endColumn":12},{"ruleId":"114","severity":1,"message":"135","line":8,"column":3,"nodeType":"116","messageId":"117","endLine":8,"endColumn":8},{"ruleId":"114","severity":1,"message":"136","line":9,"column":3,"nodeType":"116","messageId":"117","endLine":9,"endColumn":8},{"ruleId":"137","severity":1,"message":"138","line":46,"column":23,"nodeType":"139","messageId":"140","endLine":46,"endColumn":25},{"ruleId":"137","severity":1,"message":"138","line":47,"column":26,"nodeType":"139","messageId":"140","endLine":47,"endColumn":28},{"ruleId":"114","severity":1,"message":"141","line":61,"column":9,"nodeType":"116","messageId":"117","endLine":61,"endColumn":15},{"ruleId":"114","severity":1,"message":"141","line":69,"column":6,"nodeType":"116","messageId":"117","endLine":69,"endColumn":12},{"ruleId":"120","severity":1,"message":"142","line":77,"column":6,"nodeType":"122","endLine":77,"endColumn":8,"suggestions":"143"},{"ruleId":"120","severity":1,"message":"144","line":85,"column":6,"nodeType":"122","endLine":85,"endColumn":24,"suggestions":"145"},{"ruleId":"114","severity":1,"message":"146","line":2,"column":36,"nodeType":"116","messageId":"117","endLine":2,"endColumn":45},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'reply' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchReplies'. Either include it or remove the dependency array.","ArrayExpression",["149"],"'res' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchThreads'. Either include it or remove the dependency array.",["150"],"'UserContext' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchSubjects'. Either include it or remove the dependency array.",["151"],"'chosenThread' is assigned a value but never used.","'setUser' is assigned a value but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'result' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUserByUsername'. Either include it or remove the dependency array.",["152"],"React Hook useEffect has a missing dependency: 'getAllThreads'. Either include it or remove the dependency array.",["153"],"'CardTitle' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [fetchReplies]",{"range":"164","text":"165"},"Update the dependencies array to be: [fetchThreads]",{"range":"166","text":"167"},"Update the dependencies array to be: [fetchSubjects]",{"range":"168","text":"169"},"Update the dependencies array to be: [fetchUserByUsername]",{"range":"170","text":"171"},"Update the dependencies array to be: [getAllThreads, moderatedThreads]",{"range":"172","text":"173"},[1138,1140],"[fetchReplies]",[844,846],"[fetchThreads]",[320,322],"[fetchSubjects]",[2108,2110],"[fetchUserByUsername]",[2306,2324],"[getAllThreads, moderatedThreads]"]