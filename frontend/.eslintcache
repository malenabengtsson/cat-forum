[{"C:\\cat-forum\\frontend\\src\\index.js":"1","C:\\cat-forum\\frontend\\src\\App.js":"2","C:\\cat-forum\\frontend\\src\\contexts\\SubjectContextProvider.js":"3","C:\\cat-forum\\frontend\\src\\components\\ReplyList.js":"4","C:\\cat-forum\\frontend\\src\\pages\\Home.js":"5","C:\\cat-forum\\frontend\\src\\components\\Header.js":"6","C:\\cat-forum\\frontend\\src\\components\\ThreadList.js":"7","C:\\cat-forum\\frontend\\src\\contexts\\UserContextProvider.js":"8","C:\\cat-forum\\frontend\\src\\components\\ReplyItem.js":"9","C:\\cat-forum\\frontend\\src\\components\\SubjectList.js":"10","C:\\cat-forum\\frontend\\src\\components\\ThreadItem.js":"11","C:\\cat-forum\\frontend\\src\\components\\CreateNewThreadModal.js":"12","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\AuthenticationModal.js":"13","C:\\cat-forum\\frontend\\src\\components\\SubjectItem.js":"14","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\LoginModal.js":"15","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\RegisterModal.js":"16"},{"size":209,"mtime":1608300270953,"results":"17","hashOfConfig":"18"},{"size":986,"mtime":1608561614553,"results":"19","hashOfConfig":"18"},{"size":779,"mtime":1608316020731,"results":"20","hashOfConfig":"18"},{"size":2078,"mtime":1609146844332,"results":"21","hashOfConfig":"18"},{"size":195,"mtime":1608300270954,"results":"22","hashOfConfig":"18"},{"size":2504,"mtime":1609142784162,"results":"23","hashOfConfig":"18"},{"size":1372,"mtime":1609146530539,"results":"24","hashOfConfig":"18"},{"size":813,"mtime":1609142784165,"results":"25","hashOfConfig":"18"},{"size":823,"mtime":1609146852077,"results":"26","hashOfConfig":"18"},{"size":516,"mtime":1608304650881,"results":"27","hashOfConfig":"18"},{"size":834,"mtime":1609142784163,"results":"28","hashOfConfig":"18"},{"size":2667,"mtime":1609146542544,"results":"29","hashOfConfig":"18"},{"size":1028,"mtime":1609142784159,"results":"30","hashOfConfig":"18"},{"size":824,"mtime":1609142784162,"results":"31","hashOfConfig":"18"},{"size":3255,"mtime":1609163247904,"results":"32","hashOfConfig":"18"},{"size":3963,"mtime":1609163575614,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"w4ozw0",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\cat-forum\\frontend\\src\\index.js",[],["73","74"],"C:\\cat-forum\\frontend\\src\\App.js",[],"C:\\cat-forum\\frontend\\src\\contexts\\SubjectContextProvider.js",["75","76"],"import React, { createContext, useContext, useEffect, useState } from \"react\";\r\n\r\nexport const SubjectContext = createContext();\r\n\r\nconst SubjectContextProvider = (props) => {\r\nconst [chosenSubject, setChosenSubject] = useState('')\r\nconst [chosenThread, setChosenThread] = useState('');\r\nconst [subjects, setSubjects] = useState('')\r\n\r\nconst fetchSubjects = async () => {\r\n  let result = await fetch(\"/rest/subjects\");\r\n  result = await result.json();\r\n  setSubjects(result);\r\n};\r\n\r\n  const values = {\r\n    subjects,\r\n    chosenSubject,\r\n    setChosenSubject,\r\n    fetchSubjects,\r\n    chosenThread,\r\n    setChosenThread\r\n  };\r\n\r\n  return (\r\n    <SubjectContext.Provider value={values}>{props.children}</SubjectContext.Provider>\r\n  );\r\n};\r\nexport default SubjectContextProvider;\r\n","C:\\cat-forum\\frontend\\src\\components\\ReplyList.js",["77","78"],"import React, { useContext, useState, useEffect } from 'react'\r\nimport { Button, Form, FormGroup, Input,Card, CardText, CardBody, CardTitle } from \"reactstrap\";\r\nimport {SubjectContext} from '../contexts/SubjectContextProvider'\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nimport ReplyItem from './ReplyItem'\r\n\r\nconst ReplyList = () =>{\r\n  const [replies, setReplies] = useState(null)\r\n  const [newReply, setNewReply] = useState('')\r\n  const {chosenThread} = useContext(SubjectContext);\r\n  const {user} = useContext(UserContext);\r\n  \r\n  const fetchReplies = async () =>{\r\n    let result = await fetch('/rest/replies/' + chosenThread.id)\r\n    result = await result.json();\r\n    setReplies(result)\r\n  }\r\n\r\n  const sendReply = async (e) =>{\r\ne.preventDefault()\r\n let replyInformation = {\r\n   message: newReply,\r\n   sender: user.username,\r\n };\r\n  let reply = await fetch(\"/rest/replies/\" + chosenThread.id, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(replyInformation),\r\n  });\r\n  setNewReply('')\r\n  fetchReplies()\r\n  }\r\n\r\n  useEffect(() => {\r\n  fetchReplies()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {replies &&\r\n        replies.map((reply, i) => {\r\n          return <ReplyItem reply={reply} key={i} />;\r\n        })}\r\n      {user ? (\r\n        <div className=\"m-4\">\r\n          <Card>\r\n            <CardBody>\r\n              <CardTitle tag=\"h5\">Write a reply</CardTitle>\r\n              <CardText>\r\n                <Form onSubmit={sendReply}>\r\n                  <FormGroup>\r\n                    <Input\r\n                      type=\"textarea\"\r\n                      placeholder=\"Write your reply here...\"\r\n                      value={newReply}\r\n                      onChange={(e) => setNewReply(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                  <Button>Send reply</Button>\r\n                </Form>\r\n              </CardText>\r\n            </CardBody>\r\n          </Card>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nexport default ReplyList","C:\\cat-forum\\frontend\\src\\pages\\Home.js",[],"C:\\cat-forum\\frontend\\src\\components\\Header.js",["79"],"import React, {useState, useContext} from 'react'\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from 'reactstrap';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nimport AuthenticationModal from './AuthenticationModals/AuthenticationModal'\r\n\r\nconst Header = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n     const { user, setUser } = useContext(UserContext);\r\n\r\n  let history = useHistory();\r\n  const toggle = () => setIsOpen(!isOpen);\r\n   const toggleModal = () => {\r\n     setModalIsOpen(!modalIsOpen);\r\n   };\r\n\r\n    const goToHomePage = () => {\r\n      history.push(\"/\");\r\n    };\r\n     const goToMyPage = () => {\r\n      // history.push(\"/mypage\");\r\n      console.log('Add mypage here');\r\n     };\r\n\r\n     const logout = async () => {\r\n       let res = await fetch(\"/auth/logout\");\r\n       setUser(null);\r\n       history.push(\"/\");\r\n     };\r\n    \r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand onClick={goToHomePage} className=\"pointer\">\r\n          Cat forum\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            {user === null ? (\r\n              <>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className=\"pointer\"\r\n                    onClick={toggleModal}\r\n                  >\r\n                    Logga in\r\n                  </NavLink>\r\n                  <AuthenticationModal\r\n                    modalIsOpen={modalIsOpen}\r\n                    toggleModal={toggleModal}\r\n                    setModalIsOpen={setModalIsOpen}\r\n                  />\r\n                </NavItem>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <NavItem className=\"\">\r\n                  <NavLink\r\n                    className=\"pointer\"\r\n                    onClick={goToMyPage}\r\n                  >\r\n                    Min sida\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem className=\"\">\r\n                  <NavLink className=\"pointer\" onClick={logout}>\r\n                    Logga ut\r\n                  </NavLink>\r\n                </NavItem>\r\n              </>\r\n            )}\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\nexport default Header;","C:\\cat-forum\\frontend\\src\\components\\ThreadList.js",["80"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport {\r\n Button\r\n} from 'reactstrap';\r\nimport { SubjectContext } from '../contexts/SubjectContextProvider'\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nimport ThreadItem from './ThreadItem'\r\nimport CreateNewThreadModal from './CreateNewThreadModal'\r\n\r\nconst ThreadList = () =>{\r\n  const { chosenSubject } = useContext(SubjectContext);\r\n  const {user} = useContext(UserContext)\r\n  const [threads, setThreads] = useState(null);\r\n\r\n  const [modal, setModal] = useState(false);\r\n  const toggle = () => setModal(!modal);\r\n\r\n  const fetchThreads = async () =>{\r\n    let result = await fetch('/rest/threads/' + chosenSubject.id)\r\n    result = await result.json();\r\n    console.log(result);\r\n    setThreads(result);\r\n  }\r\n\r\n  useEffect(() => {\r\n   fetchThreads()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {user ? (\r\n        <div>\r\n          <Button onClick={toggle}>Create new thread</Button>\r\n          <CreateNewThreadModal\r\n            toggle={toggle}\r\n            modal={modal}\r\n            setModal={setModal}\r\n            fetchThreads={fetchThreads}\r\n          />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {threads &&\r\n        threads.map((thread, i) => {\r\n          return <ThreadItem thread={thread} key={i} />;\r\n        })}\r\n    </div>\r\n  );\r\n}\r\nexport default ThreadList;","C:\\cat-forum\\frontend\\src\\contexts\\UserContextProvider.js",[],"C:\\cat-forum\\frontend\\src\\components\\ReplyItem.js",[],"C:\\cat-forum\\frontend\\src\\components\\SubjectList.js",["81","82"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport SubjectItem from './SubjectItem'\r\nimport { SubjectContext} from '../contexts/SubjectContextProvider'\r\n\r\nconst SubjectList = () => {\r\n  const { fetchSubjects, subjects } = useContext(SubjectContext)\r\n\r\n  useEffect(() => {\r\n    fetchSubjects();\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      {subjects && subjects.map((subject, i) => {\r\n       return <SubjectItem subject={subject} key={i}/> \r\n      })}\r\n    </div>\r\n  )\r\n}\r\nexport default SubjectList;","C:\\cat-forum\\frontend\\src\\components\\ThreadItem.js",[],"C:\\cat-forum\\frontend\\src\\components\\CreateNewThreadModal.js",["83","84"],"import React, { useState, useContext } from \"react\";\r\nimport { Button, Modal, ModalBody, Form, FormGroup, Label, Input } from \"reactstrap\";\r\nimport {SubjectContext} from '../contexts/SubjectContextProvider'\r\nimport {UserContext} from '../contexts/UserContextProvider'\r\nconst CreateNewThreadModal = (props) => {\r\n  const [threadTitle, setThreadTitle] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const { chosenSubject, chosenThread } = useContext(SubjectContext)\r\n  const { user } = useContext(UserContext)\r\n\r\n  const createThread = async (e) => {\r\n    e.preventDefault()\r\n\r\n    let threadInformation = {\r\n      title: threadTitle,\r\n      creator: user.username\r\n    }\r\n\r\n   let replyInformation = {\r\n      message: message,\r\n      sender: user.username\r\n    }\r\n\r\n   let thread = await fetch(\"/rest/threads/\" + chosenSubject.id, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(threadInformation),\r\n   });\r\n    \r\n    thread = await thread.json();\r\n\r\n    console.log(thread);\r\n    console.log(thread.lastInsertRowid);\r\n\r\n     let reply = await fetch(\"/rest/replies/\" + thread.lastInsertRowid, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(replyInformation),\r\n   });\r\n   props.toggle()\r\n   props.fetchThreads()\r\n }\r\n  return (\r\n    <div className=\"row mx-auto\">\r\n      <Modal isOpen={props.modal} toggle={props.toggle} >\r\n      <h2 className=\"text-center mt-4 tradeHub-orange font-weight-bold col-12\">\r\n        Create new thread\r\n      </h2>\r\n      <ModalBody className=\"\">\r\n        <Form onSubmit={createThread}>\r\n          <FormGroup>\r\n            <Label\r\n              for=\"threadTitle\"\r\n            >\r\n              Title\r\n            </Label>\r\n            <Input\r\n              required\r\n              type=\"text\"\r\n              placeholder=\"Title\"\r\n              value={threadTitle}\r\n              onChange={(e) => setThreadTitle(e.target.value)}\r\n            />\r\n            </FormGroup>\r\n             <FormGroup>\r\n            <Label\r\n              for=\"threadTitle\"\r\n            >\r\n              Message\r\n            </Label>\r\n            <Input\r\n              required\r\n              type=\"textarea\"\r\n              placeholder=\"Message\"\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n            />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Button>\r\n                Create thread\r\n              </Button>\r\n            </FormGroup>\r\n        </Form>\r\n      </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateNewThreadModal;\r\n","C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\AuthenticationModal.js",[],"C:\\cat-forum\\frontend\\src\\components\\SubjectItem.js",[],"C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\LoginModal.js",["85"],"C:\\cat-forum\\frontend\\src\\components\\AuthenticationModals\\RegisterModal.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":1,"column":32,"nodeType":"92","messageId":"93","endLine":1,"endColumn":42},{"ruleId":"90","severity":1,"message":"94","line":1,"column":44,"nodeType":"92","messageId":"93","endLine":1,"endColumn":53},{"ruleId":"90","severity":1,"message":"95","line":25,"column":7,"nodeType":"92","messageId":"93","endLine":25,"endColumn":12},{"ruleId":"96","severity":1,"message":"97","line":36,"column":6,"nodeType":"98","endLine":36,"endColumn":8,"suggestions":"99"},{"ruleId":"90","severity":1,"message":"100","line":35,"column":12,"nodeType":"92","messageId":"93","endLine":35,"endColumn":15},{"ruleId":"96","severity":1,"message":"101","line":27,"column":6,"nodeType":"98","endLine":27,"endColumn":8,"suggestions":"102"},{"ruleId":"90","severity":1,"message":"103","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"96","severity":1,"message":"104","line":10,"column":6,"nodeType":"98","endLine":10,"endColumn":8,"suggestions":"105"},{"ruleId":"90","severity":1,"message":"106","line":8,"column":26,"nodeType":"92","messageId":"93","endLine":8,"endColumn":38},{"ruleId":"90","severity":1,"message":"95","line":35,"column":10,"nodeType":"92","messageId":"93","endLine":35,"endColumn":15},{"ruleId":"90","severity":1,"message":"107","line":9,"column":11,"nodeType":"92","messageId":"93","endLine":9,"endColumn":18},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'reply' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchReplies'. Either include it or remove the dependency array.","ArrayExpression",["110"],"'res' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchThreads'. Either include it or remove the dependency array.",["111"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchSubjects'. Either include it or remove the dependency array.",["112"],"'chosenThread' is assigned a value but never used.","'setUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},"Update the dependencies array to be: [fetchReplies]",{"range":"119","text":"120"},"Update the dependencies array to be: [fetchThreads]",{"range":"121","text":"122"},"Update the dependencies array to be: [fetchSubjects]",{"range":"123","text":"124"},[1138,1140],"[fetchReplies]",[844,846],"[fetchThreads]",[320,322],"[fetchSubjects]"]